execute pathogen#infect()
call pathogen#helptags() " generate helptags for everything in 'runtimepath'

syntax on "enable highlighting and completion
filetype plugin indent on
set nocompatible	"prevents vim from emulating the original bugs
set smartindent	"guess the indent level 
set tabstop=4 "sets up 2-space tabs
set shiftwidth=4 "use 2 spaces when text is indented
set expandtab "replace tab with spaces when pressed
set showmatch "jump to a brace match when you type a closing/opening brace
set incsearch	"search for text as you enter it
set textwidth=100 "text wraps after 100 characters/line
set number "number each line
set relativenumber
set mouse=a
set clipboard=unnamed "unnammed register copied to system clipboard
let mapleader = "," " set mapleader to a easier typable key

let g:solarized_termcolors=256
se t_Co=256
set background=dark
colorscheme solarized "third-party color scheme

hi Normal ctermbg=none "don't highlight when background transparent

"more effecient way to cycle through buffers
map gn :bn<cr>
map gp :bp<cr>
map gd :bd<cr>

let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore "**/*.pyc"
      \ -g ""'

" Add gutentags to statusline
set statusline+=%{gutentags#statusline()}

" ale settings
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_sign_column_always = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_list_window_size = 5

map <C-n> :NERDTreeToggle<CR> " Open NERDTree with Ctrl-n 

" Open NERDTree when Vim startsup and no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Close Vim if the only window left open is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" UltiSnips trigger configuration
let g:UltiSnipsExpandTrigger="<C-i>"
let g:UltiSnipsJumpForwardTrigger="<C-b>"
let g:UltiSnipsJumpBackwardTrigger="<C-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

autocmd FileType py UltiSnipsAddFiletypes python

" set default location of snippets directory
let g:UltiSnipsSnippetDirectories = ['~/.vim/snippets']


" Add shortcut for Tagbar
nmap <F8> :TagbarToggle<CR>
